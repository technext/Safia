{"version":3,"sources":["utils.js","detector.js","bootstrap-navbar.js","navbar-darken-on-scroll.js","swiper.js","theme.js"],"names":["docReady","fn","document","readyState","addEventListener","setTimeout","resize","window","isIterableArray","array","Array","isArray","length","camelize","str","text","replace","_","c","toUpperCase","concat","substr","toLowerCase","getData","el","data","JSON","parse","dataset","e","hexToRgb","hexValue","hex","indexOf","substring","result","exec","m","r","g","b","parseInt","rgbaColor","color","arguments","undefined","alpha","colors","primary","secondary","success","info","warning","danger","light","dark","grays","white","100","200","300","400","500","600","700","800","900","1000","1100","black","hasClass","className","classList","value","includes","addClass","add","getOffset","rect","getBoundingClientRect","scrollLeft","pageXOffset","documentElement","scrollTop","pageYOffset","top","left","isScrolledIntoView","offsetTop","offsetLeft","width","offsetWidth","height","offsetHeight","offsetParent","all","innerHeight","innerWidth","partial","breakpoints","xs","sm","md","lg","xl","xxl","getBreakpoint","breakpoint","classes","split","filter","cls","pop","setCookie","name","expire","expires","Date","setTime","getTime","cookie","toUTCString","getCookie","keyValue","match","settings","tinymce","theme","chart","borderColor","newChart","config","ctx","getContext","Chart","getItemFromStore","key","defaultValue","store","localStorage","getItem","_unused","setItemToStore","payload","setItem","getStoreSpace","parseFloat","escape","encodeURIComponent","stringify","toFixed","utils","detectorInit","is","html","querySelector","opera","mobile","firefox","safari","ios","iphone","ipad","ie","edge","chrome","mac","windows","navigator","userAgent","navbarInit","windowHeight","navbarCollapse","bgClassName","shadowName","colorRgb","backgroundImage","transition","Selector","ClassNames","Events","navbar","allColors","_objectSpread","colorName","Object","keys","getComputedStyle","style","backgroundColor","remove","breakPoint","navbarDarkenOnScroll","toString","paddingTop","borderBottom","swiper","Swiper","slidesPerView","spaceBetween","pagination","clickable","640","768","1024"],"mappings":"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","file":"theme.min.js","sourcesContent":["/* -------------------------------------------------------------------------- */\n/*                                    Utils                                   */\n/* -------------------------------------------------------------------------- */\nconst docReady = (fn) => {\n  // see if DOM is already available\n  if (document.readyState === \"loading\") {\n    document.addEventListener(\"DOMContentLoaded\", fn);\n  } else {\n    setTimeout(fn, 1);\n  }\n};\n\nconst resize = (fn) => window.addEventListener(\"resize\", fn);\n\nconst isIterableArray = (array) => Array.isArray(array) && !!array.length;\n\nconst camelize = (str) => {\n  const text = str.replace(/[-_\\s.]+(.)?/g, (_, c) =>\n    c ? c.toUpperCase() : \"\"\n  );\n  return `${text.substr(0, 1).toLowerCase()}${text.substr(1)}`;\n};\n\nconst getData = (el, data) => {\n  try {\n    return JSON.parse(el.dataset[camelize(data)]);\n  } catch (e) {\n    return el.dataset[camelize(data)];\n  }\n};\n\n/* ----------------------------- Colors function ---------------------------- */\n\nconst hexToRgb = (hexValue) => {\n  let hex;\n  hexValue.indexOf(\"#\") === 0\n    ? (hex = hexValue.substring(1))\n    : (hex = hexValue);\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(\n    hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b)\n  );\n  return result\n    ? [\n        parseInt(result[1], 16),\n        parseInt(result[2], 16),\n        parseInt(result[3], 16),\n      ]\n    : null;\n};\n\nconst rgbaColor = (color = \"#fff\", alpha = 0.5) =>\n  `rgba(${hexToRgb(color)}, ${alpha})`;\n\n/* --------------------------------- Colors --------------------------------- */\n\nconst colors = {\n  primary: \"#0057FF\",\n  secondary: \"#748194\",\n  success: \"#00d27a\",\n  info: \"#27bcfd\",\n  warning: \"#f5803e\",\n  danger: \"#e63757\",\n  light: \"#f9fafd\",\n  dark: \"#000\",\n};\n\nconst grays = {\n  white: \"#fff\",\n  100: \"#f9fafd\",\n  200: \"#edf2f9\",\n  300: \"#d8e2ef\",\n  400: \"#b6c1d2\",\n  500: \"#9da9bb\",\n  600: \"#748194\",\n  700: \"#162044\", //\n  800: \"#4d5969\",\n  900: \"#070E27\", // bg dark\n  1000: \"#232e3c\",\n  1100: \"#0b1727\",\n  black: \"#000\",\n};\n\nconst hasClass = (el, className) => {\n  !el && false;\n  return el.classList.value.includes(className);\n};\n\nconst addClass = (el, className) => {\n  el.classList.add(className);\n};\n\nconst getOffset = (el) => {\n  const rect = el.getBoundingClientRect();\n  const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n  const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n  return { top: rect.top + scrollTop, left: rect.left + scrollLeft };\n};\n\nconst isScrolledIntoView = (el) => {\n  let top = el.offsetTop;\n  let left = el.offsetLeft;\n  const width = el.offsetWidth;\n  const height = el.offsetHeight;\n\n  while (el.offsetParent) {\n    // eslint-disable-next-line no-param-reassign\n    el = el.offsetParent;\n    top += el.offsetTop;\n    left += el.offsetLeft;\n  }\n\n  return {\n    all:\n      top >= window.pageYOffset &&\n      left >= window.pageXOffset &&\n      top + height <= window.pageYOffset + window.innerHeight &&\n      left + width <= window.pageXOffset + window.innerWidth,\n    partial:\n      top < window.pageYOffset + window.innerHeight &&\n      left < window.pageXOffset + window.innerWidth &&\n      top + height > window.pageYOffset &&\n      left + width > window.pageXOffset,\n  };\n};\n\nconst breakpoints = {\n  xs: 0,\n  sm: 576,\n  md: 768,\n  lg: 992,\n  xl: 1200,\n  xxl: 1540,\n};\n\nconst getBreakpoint = (el) => {\n  const classes = el && el.classList.value;\n  let breakpoint;\n  if (classes) {\n    breakpoint =\n      breakpoints[\n        classes\n          .split(\" \")\n          .filter((cls) => cls.includes(\"navbar-expand-\"))\n          .pop()\n          .split(\"-\")\n          .pop()\n      ];\n  }\n  return breakpoint;\n};\n\n/* --------------------------------- Cookie --------------------------------- */\n\nconst setCookie = (name, value, expire) => {\n  const expires = new Date();\n  expires.setTime(expires.getTime() + expire);\n  document.cookie = name + \"=\" + value + \";expires=\" + expires.toUTCString();\n};\n\nconst getCookie = (name) => {\n  var keyValue = document.cookie.match(\"(^|;) ?\" + name + \"=([^;]*)(;|$)\");\n  return keyValue ? keyValue[2] : keyValue;\n};\n\nconst settings = {\n  tinymce: {\n    theme: \"oxide\",\n  },\n  chart: {\n    borderColor: \"rgba(255, 255, 255, 0.8)\",\n  },\n};\n\n/* -------------------------- Chart Initialization -------------------------- */\n\nconst newChart = (chart, config) => {\n  const ctx = chart.getContext(\"2d\");\n  return new window.Chart(ctx, config);\n};\n\n/* ---------------------------------- Store --------------------------------- */\n\nconst getItemFromStore = (key, defaultValue, store = localStorage) => {\n  try {\n    return JSON.parse(store.getItem(key)) || defaultValue;\n  } catch {\n    return store.getItem(key) || defaultValue;\n  }\n};\n\nconst setItemToStore = (key, payload, store = localStorage) =>\n  store.setItem(key, payload);\nconst getStoreSpace = (store = localStorage) =>\n  parseFloat(\n    (\n      escape(encodeURIComponent(JSON.stringify(store))).length /\n      (1024 * 1024)\n    ).toFixed(2)\n  );\n\nconst utils = {\n  docReady,\n  resize,\n  isIterableArray,\n  camelize,\n  getData,\n  hasClass,\n  addClass,\n  hexToRgb,\n  rgbaColor,\n  colors,\n  grays,\n  getOffset,\n  isScrolledIntoView,\n  getBreakpoint,\n  setCookie,\n  getCookie,\n  newChart,\n  settings,\n  getItemFromStore,\n  setItemToStore,\n  getStoreSpace,\n};\nexport default utils;\n","import { addClass } from './utils';\n/* -------------------------------------------------------------------------- */\n/*                                  Detector                                  */\n/* -------------------------------------------------------------------------- */\n\nconst detectorInit = () => {\n  const { is } = window;\n  const html = document.querySelector('html');\n  is.opera() && addClass(html, 'opera');\n  is.mobile() && addClass(html, 'mobile');\n  is.firefox() && addClass(html, 'firefox');\n  is.safari() && addClass(html, 'safari');\n  is.ios() && addClass(html, 'ios');\n  is.iphone() && addClass(html, 'iphone');\n  is.ipad() && addClass(html, 'ipad');\n  is.ie() && addClass(html, 'ie');\n  is.edge() && addClass(html, 'edge');\n  is.chrome() && addClass(html, 'chrome');\n  is.mac() && addClass(html, 'osx');\n  is.windows() && addClass(html, 'windows');\n  navigator.userAgent.match('CriOS') && addClass(html, 'chrome');\n\n};\n\nexport default detectorInit;\n","import utils from './utils';\n/*-----------------------------------------------\n|   Top navigation opacity on scroll\n-----------------------------------------------*/\nconst navbarInit = () =>{\n  const Selector = {\n    NAVBAR: '[data-navbar-on-scroll]',\n    NAVBAR_COLLAPSE: '.navbar-collapse',\n    NAVBAR_TOGGLER: '.navbar-toggler',\n    \n  };\n\n  const ClassNames = {\n    COLLAPSED: 'collapsed',\n  };\n\n  \n  const Events = {\n    SCROLL: 'scroll',\n    SHOW_BS_COLLAPSE: 'show.bs.collapse',\n    HIDE_BS_COLLAPSE: 'hide.bs.collapse',\n    HIDDEN_BS_COLLAPSE: 'hidden.bs.collapse',\n  };\n\n  const DataKey = {\n    NAVBAR_ON_SCROLL: 'navbar-light-on-scroll'\n  };\n  \n  const navbar = document.querySelector(Selector.NAVBAR);\n  \n  if (navbar){\n    const windowHeight = window.innerHeight;\n    const html = document.documentElement;\n    const navbarCollapse = navbar.querySelector(Selector.NAVBAR_COLLAPSE);\n    const allColors = { ...utils.colors, ...utils.grays };\n\n    const name = utils.getData(navbar, DataKey.NAVBAR_ON_SCROLL);\n    const colorName = Object.keys(allColors).includes(name) ? name : 'light';\n    const color = allColors[colorName];\n    const bgClassName = `bg-${colorName}`;\n    const shadowName = 'shadow-transition'\n    const colorRgb = utils.hexToRgb(color);\n    const { backgroundImage } = window.getComputedStyle(navbar);\n    const transition = 'background-color 0.35s ease';\n    navbar.style.backgroundImage = 'none';\n\n     // Change navbar background color on scroll\n     window.addEventListener(Events.SCROLL, () => {\n      const { scrollTop } = html;\n      let alpha = (scrollTop / windowHeight) * .5;\n      alpha >= 1 && (alpha = 1);\n      navbar.style.backgroundColor = `rgba(${colorRgb[0]}, ${colorRgb[1]}, ${colorRgb[2]}, ${alpha})`;\n      navbar.style.backgroundImage = (alpha > 0 || utils.hasClass(navbarCollapse, 'show')) ? backgroundImage : 'none';\n      (alpha > 0 || utils.hasClass(navbarCollapse, 'show')) ? navbar.classList.add(shadowName):navbar.classList.remove(shadowName);\n    });\n\n     // Toggle bg class on window resize\n    utils.resize(() => {\n      const breakPoint = utils.getBreakpoint(navbar);\n      if (window.innerWidth > breakPoint) {\n        navbar.style.backgroundImage = html.scrollTop ? backgroundImage : 'none';\n        navbar.style.transition = 'none';\n      } \n      else if (\n        !utils.hasClass(\n          navbar.querySelector(Selector.NAVBAR_TOGGLER),\n          ClassNames.COLLAPSED\n         \n        )\n      )\n\n      { \n        navbar.classList.add(bgClassName);\n        navbar.classList.add(shadowName);\n        navbar.style.backgroundImage = backgroundImage;\n      }\n     \n      if (window.innerWidth <= breakPoint) {\n        navbar.style.transition = utils.hasClass(navbarCollapse, 'show') ? transition : 'none';\n      } \n\n    });\n\n    navbarCollapse.addEventListener(Events.SHOW_BS_COLLAPSE, () => {\n      navbar.classList.add(bgClassName);\n      navbar.classList.add(shadowName);\n      navbar.style.backgroundImage = backgroundImage;\n      navbar.style.transition = transition;\n    });\n\n    navbarCollapse.addEventListener(Events.HIDE_BS_COLLAPSE, () => {\n      navbar.classList.remove(bgClassName);\n      navbar.classList.remove(shadowName);\n      !html.scrollTop && (navbar.style.backgroundImage = 'none');\n    });\n\n    navbarCollapse.addEventListener(Events.HIDDEN_BS_COLLAPSE, () => {\n      navbar.style.transition = 'none';\n    });\n\n  }\n\n};\n\nexport default navbarInit;\n\n\n\n\n\n","import utils from \"./utils\";\n/* -------------------------------------------------------------------------- */\n/*                         Navbar Darken on scroll                        */\n/* -------------------------------------------------------------------------- */\nconst navbarDarkenOnScroll = () => {\n  const Selector = {\n    NAVBAR: \"[data-navbar-darken-on-scroll]\",\n    NAVBAR_COLLAPSE: \".navbar-collapse\",\n    NAVBAR_TOGGLER: \".navbar-toggler\",\n  };\n  // const ClassNames = {\n  //   COLLAPSED: \"collapsed\",\n  // };\n  const Events = {\n    SCROLL: \"scroll\",\n    SHOW_BS_COLLAPSE: \"show.bs.collapse\",\n    HIDE_BS_COLLAPSE: \"hide.bs.collapse\",\n    HIDDEN_BS_COLLAPSE: \"hidden.bs.collapse\",\n  };\n  const DataKey = {\n    NAVBAR_DARKEN_ON_SCROLL: \"navbar-darken-on-scroll\",\n  };\n  const navbar = document.querySelector(Selector.NAVBAR);\n  if (navbar) {\n    const defaultColorName = 'dark';\n    const windowHeight = window.innerHeight;\n    const html = document.documentElement;\n    // const navbarCollapse = navbar.querySelector(Selector.NAVBAR_COLLAPSE);\n    const allColors = { ...utils.colors, ...utils.grays };\n    const name = utils.getData(navbar, DataKey.NAVBAR_DARKEN_ON_SCROLL);\n    const colorName = Object.keys(allColors).includes(name.toString())\n      ? name\n      : defaultColorName;\n    const color = allColors[colorName];\n    // const bgClassName = `bg-${colorName}`;\n    const colorRgb = utils.hexToRgb(color);\n    const { backgroundImage } = window.getComputedStyle(navbar);\n    // const transition = \"background-color 0.35s ease\";\n    const borderColor = utils.hexToRgb(allColors['700'])\n    const paddingTop = 48;\n    navbar.style.paddingTop = `${paddingTop}px`;\n    navbar.style.backgroundImage = \"none\";\n    navbar.style.borderBottom = \"none\";\n    //shadow\n    const shadowName = 'shadow-transition'\n    // Change navbar background color on scroll'\n    window.addEventListener(Events.SCROLL, () => {\n      const { scrollTop } = html;\n      let alpha = (scrollTop / windowHeight) * 2;\n      // console.log({alpha});\n      alpha >= 1 && (alpha = 1);\n      navbar.style.backgroundColor = `rgba(${colorRgb[0]}, ${colorRgb[1]}, ${colorRgb[2]}, ${alpha})`;\n      navbar.style.borderBottom = `1px solid rgba(${borderColor[0]}, ${borderColor[1]}, ${borderColor[2]}, ${alpha})`;\n      navbar.style.paddingTop = `${paddingTop * (1 - alpha)}px`;\n      navbar.style.backgroundImage =\n        alpha > 0 \n          ? backgroundImage\n          : \"none\";\n      alpha > 0.2 ? navbar.classList.add(shadowName):navbar.classList.remove(shadowName);\n    });\n    // Toggle bg class on window resize\n    // utils.resize(() => {\n    //   const breakPoint = utils.getBreakpoint(navbar);\n    //   if (window.innerWidth > breakPoint) {\n    //     navbar.classList.remove(bgClassName);\n    //     navbar.style.backgroundImage = html.scrollTop\n    //       ? backgroundImage\n    //       : \"none\";\n    //     navbar.style.transition = \"none\";\n    //   } else if (\n    //     !utils.hasClass(\n    //       navbar.querySelector(Selector.NAVBAR_TOGGLER),\n    //       ClassNames.COLLAPSED\n    //     )\n    //   ) {\n    //     navbar.classList.add(bgClassName);\n    //     // navbar.classList.add(shadowName);\n    //     navbar.style.backgroundImage = backgroundImage;\n    //   }\n    //   if (window.innerWidth <= breakPoint) {\n    //     navbar.style.transition = utils.hasClass(navbarCollapse, \"show\")\n    //       ? transition\n    //       : \"none\";\n    //   }\n    // });\n\n    // navbarCollapse.addEventListener(Events.SHOW_BS_COLLAPSE, () => {\n    //   navbar.classList.add(bgClassName);\n    //   navbar.classList.add(shadowName);\n    //   navbar.style.backgroundImage = backgroundImage;\n    //   navbar.style.transition = transition;\n    // });\n    // navbarCollapse.addEventListener(Events.HIDE_BS_COLLAPSE, () => {\n    //   navbar.classList.remove(bgClassName);\n    //   navbar.classList.remove(shadowName);\n    //   !html.scrollTop && (navbar.style.backgroundImage = \"none\");\n    // });\n    // navbarCollapse.addEventListener(Events.HIDDEN_BS_COLLAPSE, () => {\n    //   navbar.style.transition = \"none\";\n    // });\n  }\n};\nexport default navbarDarkenOnScroll;","\nconst swiper = new window.Swiper('.swiper-container', {\n  slidesPerView: 1,\n  spaceBetween: 10,\n  // init: false,\n  pagination: {\n    el: '.swiper-pagination',\n    clickable: true,\n  },\n  breakpoints: {\n    640: {\n      slidesPerView: 1,\n      spaceBetween: 30,\n    },\n    768: {\n      slidesPerView: 2,\n      spaceBetween: 40,\n    },\n    1024: {\n      slidesPerView: 3,\n      spaceBetween: 50,\n    },\n  }\n});\nexport default swiper;\n","import { docReady } from './utils';\nimport navbarInit from './bootstrap-navbar';\nimport detectorInit from './detector';\nimport swiper from './swiper';\nimport navbarDarkenOnScroll from './navbar-darken-on-scroll'\n\n\n// /* -------------------------------------------------------------------------- */\n// /*                            Theme Initialization                            */\n// /* -------------------------------------------------------------------------- */\n\ndocReady(navbarInit);\ndocReady(detectorInit);\ndocReady(swiper);\ndocReady(navbarDarkenOnScroll);\n"]}